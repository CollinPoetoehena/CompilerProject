%{

/*
The lexer reads input text and generates a sequence of tokens. 
The parser then reads this sequence of tokens and uses it to build an abstract syntax tree (AST) 
representing the structure of the input.
*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "palm/memory.h"
#include "palm/ctinfo.h"
#include "palm/dbug.h"
#include "palm/str.h"
#include "ccngen/ast.h"
#include "ccngen/enum.h"
#include "global/globals.h"

static node_st *parseresult = NULL;
extern int yylex(); /* get next token, no more input returns 0 */
static int yyerror( char *errname); /* prints grammar violation message */
extern FILE *yyin;
void AddLocToNode(node_st *node, void *begin_loc, void *end_loc);


%}

/*  
%union is used to define the different types of values that the parser is expected to handle.
The %union declaration allows you to specify the types of the values associated with the tokens and nonterminals in the grammar, 
which can be used in the semantic actions to perform operations on those values.

First part is the C type.
Second part is the type that the parser will handle.
*/
%union {
 char               *id;
 int                 cint;
 float               cflt;
 enum Type           ctype;
 node_st             *node;
}

%locations

%token BRACKET_L BRACKET_R COMMA SEMICOLON CURLYBRACE_L CURLYBRACE_R
%token MINUS PLUS STAR SLASH PERCENT LE LT GE GT EQ NE OR AND 
%token EXCLAMATION
%token TRUEVAL FALSEVAL LET
%token INTTYPE FLOATTYPE BOOLTYPE VOIDTYPE

%token <cint> NUM
%token <cflt> FLOAT
%token <id> ID

%token IF ELSE WHILE DO FOR RETURN EXTERN EXPORT

/* 
The %type section is used to define the types of values that can be generated by the parser
See union section, <node> stands for node_st, which is a generic type for an ast node
*/
// Top nodes
%type <node> program decls decl

// Function nodes
%type <node> funbody param fundef funcall

// Statement nodes
%type <node> stmts stmt
%type <node> ifelse while dowhile for return

%type <node> intval floatval boolval constant expr exprs
%type <node> assign varlet var
%type <node> globdecl globdef vardecl

//TODO: is this correct or is the block incorrect????
%type <node> block

// Enum types
%type <ctype> type

// Yacc version: Bison 3.8.2 supports %precedence, so %precedence warning can be ignored
%precedence THEN
%precedence ELSE

// Precedence rules, lowest on top, highest at the bottom
// Precedence rules in C https://en.cppreference.com/w/c/language/operator_precedence
%left COMMA
  // Simple assignment (right associative)
%right LET
  // Logical OR 
%left OR
  // Logical AND
%left AND
  // Relational operators 
%left EQ NE
%left GT GE LT LE
  // Addition and subtraction
%left MINUS PLUS
  // Multiplication, division, and remainder
%left STAR SLASH PERCENT
  // Monary operators (right associative)
  // MONOP_MINUS is a created precedence rule for monary operator -
  // TYPE_CAST is a created precedence rule for a type cast
%right MONOP_MINUS EXCLAMATION TYPECAST
  // Function call
%left FUNCTIONCALL

/* 
Starting rule for the parser, in this case the program rule 
From here it starts expanding. So, everything needs to be linked
When coding grammars, you can change it to the grammar rule you are trying to test.
This will give warnings from useless grammars because they are not linked, but you can ignore that.
*/
%start program

%%
// All the grammar rules are specified here
// TODO: operator precedence in expr: https://canvas.uva.nl/courses/36019/discussion_topics/662306
program: decls
         {
           parseresult = ASTprogram($1);
         }
         ;

decls: decl decls
        {
          // $$ = means what you return to coconut
          $$ = ASTdecls($1, $2);
          //printf("decl and decls\n");
        }
      | decl
        {
          // Next is NULL
          $$ = ASTdecls($1, NULL);
          //printf("one decl\n");
        }
      ;

// TESTED
decl: fundef
        {
          //TODO: is this correct?
          $$ = $1;
          //TODO: how do I create the Decls node for the AST????
          //printf("fundef decl\n");
        }
      | globdecl
        {
          //TODO: is this correct?
          $$ = $1;
          //printf("globdecl decl\n");
        }
      | globdef
        {
          //TODO: is this correct?
          $$ = $1;
          //printf("globdef decl\n");
        }
      ;

// TESTED
// No FunHeader node in main.ccn because funHeader return type 
// is encoded in the param, such as first param is return type
// FunDec is also specified in FunDef node
fundef: EXPORT type ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
        {
          $$ = ASTfundef($8, $5, $2, $3, true);
          //printf("fun def including funheader param with export\n");
        }
      | EXPORT type ID BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
        {
          // Empty param
          $$ = ASTfundef($7, NULL, $2, $3, true);
          //printf("fun def without funheader param with export\n");
        }
      | type ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
        {
          $$ = ASTfundef($7, $4, $1, $2, false);
          //printf("fun def including funheader param without export\n");
        }
      | type ID BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
        {
          // Empty param
          $$ = ASTfundef($6, NULL, $1, $2, false);
          //printf("fun def wihtout funheader param without export\n");
        }
      | EXTERN type ID BRACKET_L param BRACKET_R
        {
          // Empty funbody
          // No need to do anything with EXTERN for the FunDec because they are always external!
          $$ = ASTfundef(NULL, $5, $2, $3, true);
          //printf("fun dec including funheader param (fundef is also used for a fundec)\n");
        }
      | EXTERN type ID BRACKET_L BRACKET_R
        {
          // Empty param and empty funbody
          $$ = ASTfundef(NULL, NULL, $2, $3, true);
          // No need to do anything with EXTERN for the FunDec because they are always external!
          //printf("fun dec without funheader param (fundef is also used for a fundec)\n");
        }
      ;

globdecl: EXTERN type ID SEMICOLON
         {
          // in ID zit de waarde die je lexer daarin heeft gezet met STRCopy(yytext)
           $$ = ASTglobdecl($2, $3);
           //TODO: what is Ids node in main.ccn?????
           //printf("global declaration\n");
         }
        ;

globdef: EXPORT type ID LET expr SEMICOLON
        {
          // dims is NULL for now because it stands for array dimensions
          $$ = ASTglobdef(NULL, $5, $2, $3, true);
          //printf("glob def with export and assignment (= expr)\n");
        }
      | type ID LET expr SEMICOLON
        {
          $$ = ASTglobdef(NULL, $4, $1, $2, false);
          //printf("glob def type and assign\n");
        }
      | EXPORT type ID SEMICOLON 
        {
          $$ = ASTglobdef(NULL, NULL, $2, $3, true);
          //printf("glob def with export\n");
        }
      | type ID SEMICOLON 
        {
          $$ = ASTglobdef(NULL, NULL, $1, $2, false);
          //printf("glob def without export\n");
        }
      ;

param: type ID COMMA param
      {
        //TODO: is this correct
        $$ = ASTparam(NULL, $4, $2, $1);
          //printf("fun body with 0 or infinite vardecl and statements\n");
      }
     | type ID
      {
        //TODO: is this correct
        $$ = ASTparam(NULL, NULL, $2, $1);
          //printf("fun body with 0 or infinite vardecl and statements\n");
      }
    ;

funbody: vardecl stmts
        {
          $$ = ASTfunbody($1, $2);
          //printf("fun body with 1 or infinite vardecl and statements\n");
        }
      | vardecl
        {
          $$ = ASTfunbody($1, NULL);
          //printf("fun body with only 1 or infinite vardecl\n");
        }
      | stmts
        {
          $$ = ASTfunbody(NULL, $1);
          //printf("fun body with only 1 or infinite statements\n");
        }
      | 
        {
          //TODO: is this correct for an empty functionbody???
          $$ = ASTfunbody(NULL, NULL);
          //printf("empty fun body\n");
        }
      ;

vardecl: type ID SEMICOLON
        {
          // dims expr is NULL, initial expr is NULL, next is NULL, name is ID, type is type
          $$ = ASTvardecl(NULL, NULL, NULL, $2, $1);
          //printf("var decl\n");
        }
      | type ID LET expr SEMICOLON
        {
          $$ = ASTvardecl(NULL, $4, NULL, $2, $1);
          //printf("var decl with assign\n");
        }
      | type ID SEMICOLON vardecl
        {
          // dims expr is NULL, initial expr is NULL, next is NULL, name is ID, type is type
          $$ = ASTvardecl(NULL, NULL, $4, $2, $1);
          //printf("var decl\n");
        }
      | type ID LET expr SEMICOLON vardecl
        {
          $$ = ASTvardecl(NULL, $4, $6, $2, $1);
          //printf("var decl with assign\n");
        }
      ;

stmts: stmt stmts
        {
          $$ = ASTstmts($1, $2);
        }
      | stmt
        {
          $$ = ASTstmts($1, NULL);
        }
      ;

//TODO: is this correct and all other things in parser, ask Simon or TA!
stmt: assign
      {
         $$ = $1;
      }
    | ifelse
      {
        //TODO: is this correct???
        $$ = $1;
        //printf("ifelse in statement found \n");
      }
    | while
      {
        //TODO: is this correct???
        $$ = $1;
        //printf("while in statement found \n");
      }
    | dowhile
      {
        //TODO: is this correct???
        $$ = $1;
        //printf("do while in statement found \n");
      }
    | for
      {
        //TODO: is this correct???
        $$ = $1;
        //printf("for in statement found \n");
      }
      ;
    | return
      {
        //TODO: is this correct???
        $$ = $1;
        //printf("return in statement found \n");
      }
    | funcall SEMICOLON %prec FUNCTIONCALL
      {
        //TODO: Is this correct???
        $$ = ASTexprstmt($1);
        // Funcall belongs in expr and stmt, in stmt it has a SEMICOLON
        //printf("expr function call\n");
      }
    ;
// %prec LOWER_THAN_ELSE (== nonassoc) makes sure that the else belongs to the closest if statement
ifelse: IF BRACKET_L expr BRACKET_R block %prec THEN
        {
          //TODO: is this correct with the blocks (always returns ASTstmts node)????
          $$ = ASTifelse($3, $5, NULL);
          //printf("IF without else block \n");
        }
      | IF BRACKET_L expr BRACKET_R block ELSE block 
        {
          //TODO: is this correct with the blocks (always returns ASTstmts node)????
          $$ = ASTifelse($3, $5, $7);
          //printf("IF including else block \n");
        }
      ;
while: WHILE BRACKET_L expr BRACKET_R block
       {
        //TODO: is this correct with the blocks (always returns ASTstmts node)????
        $$ = ASTwhile($3, $5);
        //printf("WHILE statement \n");
       }
      ;
dowhile: DO block WHILE BRACKET_L expr BRACKET_R SEMICOLON
          {
           //TODO: is this correct with the blocks (always returns ASTstmts node)????
           $$ = ASTdowhile($5, $2);
           //printf("DO-WHILE statement \n");
          }
        ;
for: FOR BRACKET_L INTTYPE varlet LET expr COMMA expr COMMA expr BRACKET_R block
     {
      //TODO: is this correct with the blocks (always returns ASTstmts node)????
      $$ = ASTfor($6, $8, $10, $12);
      //printf("FOR statement with second expr \n");
     }
    | FOR BRACKET_L INTTYPE varlet LET expr COMMA expr BRACKET_R block
     {
      //TODO: is this correct with the blocks (always returns ASTstmts node)????
      //TODO: And how to code standard step +1, can it just be +1???
      $$ = ASTfor($6, $8, NULL, $10);
      //printf("FOR statement without second expr \n");
     }
    ;
return: RETURN SEMICOLON
        {
          $$ = ASTreturn(NULL);
          //printf("RETURN statement without expr \n");
        }
      | RETURN expr SEMICOLON
        {
          $$ = ASTreturn($2);
          //printf("RETURN statement including expr \n");
        }
      ;

// Block always needs to return ASTstmts, because it is used in the statements as a Stmts node type 
block: CURLYBRACE_L stmts CURLYBRACE_R
      {
        //TODO: is this correct???
        $$ = $2;
        //printf("block with curly braces \n");
      }
    | stmt
      {
        //TODO: is this correct???
        $$ = ASTstmts($1, NULL);
        //printf("stmt block without curly braces \n");
      }
    ;

funcall: ID BRACKET_L BRACKET_R
        {
          // No arguments
          $$ = ASTfuncall(NULL, $1);
          //printf("fun call without exprs with semicolon\n");
        }
      | ID BRACKET_L exprs BRACKET_R 
        {
          $$ = ASTfuncall($3, $1);
          //printf("fun call with exprs with semicolon\n");
        }
      ;

// For precedence of operators call them with the lexer token and not another rule such as binop
//TODO: check with Simon or TA if all rules are correct and specifically the expr rule!
expr: BRACKET_L expr BRACKET_R
      {
        //TODO: is this correct???
        $$ = ASTexprstmt($2);
        // $$ = $2;
        //printf("expr with brackets \n");
      }
    | expr[left] PLUS expr[right]
      {
        $$ = ASTbinop($left, $right, BO_add);
        AddLocToNode($$, &@left, &@right);
        // //printf("expr binop expr including brackets \n");
      }
    | expr[left] MINUS expr[right]
      {
        $$ = ASTbinop($left, $right, BO_sub);
        AddLocToNode($$, &@left, &@right);
        // //printf("expr binop expr including brackets \n");
      }
    | expr[left] SLASH expr[right]
      {
        $$ = ASTbinop($left, $right, BO_div);
        AddLocToNode($$, &@left, &@right);
        // //printf("expr binop expr including brackets \n");
      }
    | expr[left] STAR expr[right]
      {
        $$ = ASTbinop($left, $right, BO_mul);
        AddLocToNode($$, &@left, &@right);
        // //printf("expr binop expr including brackets \n");
      }
    | expr[left] PERCENT expr[right]
      {
        $$ = ASTbinop($left, $right, BO_mod);
        AddLocToNode($$, &@left, &@right);
        // //printf("expr binop expr including brackets \n");
      }
    | expr[left] LE expr[right]
      {
        $$ = ASTbinop($left, $right, BO_le);
        AddLocToNode($$, &@left, &@right);
        // //printf("expr binop expr including brackets \n");
      }
    | expr[left] LT expr[right]
      {
        $$ = ASTbinop($left, $right, BO_lt);
        AddLocToNode($$, &@left, &@right);
        // //printf("expr binop expr including brackets \n");
      }
    | expr[left] GE expr[right]
      {
        $$ = ASTbinop($left, $right, BO_ge);
        AddLocToNode($$, &@left, &@right);
        // //printf("expr binop expr including brackets \n");
      }
    | expr[left] GT expr[right]
      {
        $$ = ASTbinop($left, $right, BO_gt);
        AddLocToNode($$, &@left, &@right);
        // //printf("expr binop expr including brackets \n");
      }
    | expr[left] EQ expr[right]
      {
        $$ = ASTbinop($left, $right, BO_eq);
        AddLocToNode($$, &@left, &@right);
        // //printf("expr binop expr including brackets \n");
      }
    | expr[left] OR expr[right]
      {
        $$ = ASTbinop($left, $right, BO_or);
        AddLocToNode($$, &@left, &@right);
        // //printf("expr binop expr including brackets \n");
      }
    | expr[left] AND expr[right]
      {
        $$ = ASTbinop($left, $right, BO_and);
        AddLocToNode($$, &@left, &@right);
        // //printf("expr binop expr including brackets \n");
      }
    | expr[left] NE expr[right]
      {
        $$ = ASTbinop($left, $right, BO_ne);
        AddLocToNode($$, &@left, &@right);
        //printf("expr binop expr including brackets \n");
      }
    | MINUS expr %prec MONOP_MINUS
      {
        // This MINUS uses the MONOP_MINUS precedence rule
        // arithmetic negation, used for arithmetic values (=numbers, etc)
        $$ = ASTmonop($2, MO_neg);
        // AddLocToNode($$, &@2);
        //printf("monop expr including brackets \n");
      }
    | EXCLAMATION expr
      {
        // logical negation, used for boolean values (true, false)
        $$ = ASTmonop($2, MO_not);
        // AddLocToNode($$, &@2);
        //printf("expr monop expr including brackets \n");
      }
    | BRACKET_L type BRACKET_R expr %prec TYPECAST
      {
        // Type cast
        $$ = ASTcast($4, $2);
        //printf("expr with basic type \n");
      }
    | funcall %prec FUNCTIONCALL
      {
        // Funcall belongs in expr and stmt, in expr it does not have a SEMICOLON
        $$ = $1;
        // //printf("expr function call\n");
      }
    | var
      {
        $$ = $1;
        //printf("ID expr \n");
      }
    | constant
      {
        $$ = $1;
        //printf("constant expr\n");
      }
    ;

// exprs has one or an infinite amount of expr
exprs: expr
      {
        //TODO: is this correct??
        $$ = ASTexprs($1, NULL);
        // //printf("assign without cast\n");
      }
     | exprs COMMA expr
      {
        $$ = ASTexprs($1, $3);
        // //printf("assign without cast\n");
      }
     ;

assign: varlet LET expr SEMICOLON
        {
          $$ = ASTassign($1, $3);
          //printf("assign without cast\n");
        }
      ;

// type non-terminal
// TODO: because this type also has void, with type checking there needs to be a check
// if it can include a void type, but this is later on!
type: BOOLTYPE  { $$ = CT_bool; }
    | FLOATTYPE { $$ = CT_float; }
    | INTTYPE   { $$ = CT_int; }
    | VOIDTYPE  { $$ = CT_void; }
    ;

// Variable in assignment.
varlet: ID
        {
          $$ = ASTvarlet($1);
          AddLocToNode($$, &@1, &@1);
        }
      ;

// Variable in an expression.
var: ID
        {
          $$ = ASTvar($1);
          AddLocToNode($$, &@1, &@1);
        }
      ;

constant: floatval
          {
            // Assign the value of the floatval grammar rule AST creation to this constant node type
            $$ = $1;
          }
        | intval
          {
            $$ = $1;
          }
        | boolval
          {
            $$ = $1;
          }
        ;

floatval: FLOAT
           {
             $$ = ASTfloat($1);
           }
         ;

intval: NUM
        {
          $$ = ASTnum($1);
        }
      ;

boolval: TRUEVAL
         {
           $$ = ASTbool(true);
         }
       | FALSEVAL
         {
           $$ = ASTbool(false);
         }
       ;
%%

/* Add location tracking information to a node in the parse tree */
void AddLocToNode(node_st *node, void *begin_loc, void *end_loc)
{
    // Needed because YYLTYPE unpacks later than top-level decl.
    YYLTYPE *loc_b = (YYLTYPE*)begin_loc;
    YYLTYPE *loc_e = (YYLTYPE*)end_loc;
    NODE_BLINE(node) = loc_b->first_line;
    NODE_BCOL(node) = loc_b->first_column;
    NODE_ELINE(node) = loc_e->last_line;
    NODE_ECOL(node) = loc_e->last_column;
}

/*
yyerror is called by the parser when it encounters a syntax error in the input file.

yyerror should print out user-friendly error messages when there is a syntax error in the input file.
And it should terminate the program.

It takes one argument, which is the char * describing the error message (char * == string type).
CTI (Control and Information) is used to print out the error message with the line number 
and column number where the error occurred. Then  the program is aborted using CTIabortOnError.
*/
static int yyerror( char *error)
{
  CTI(CTI_ERROR, true, "line %d, col %d\nError parsing source code: %s\n",
            global.line, global.col, error);
  CTIabortOnError();
  return( 0);
}

node_st *SPdoScanParse(node_st *root)
{
    DBUG_ASSERT(root == NULL, "Started parsing with existing syntax tree.");
    yyin = fopen(global.input_file, "r");
    if (yyin == NULL) {
        CTI(CTI_ERROR, true, "Cannot open file '%s'.", global.input_file);
        CTIabortOnError();
    }
    yyparse();
    return parseresult;
}
