#include "civic.h"

void printIntVec(int[n] vec) {
    for (int i = 0, n) {
        printInt(vec[i]);
        printSpaces(1);
    }
}

void printFloatVec(float[n] vec) {
    for (int i = 0, n) {
        printFloat(vec[i]);
        printSpaces(1);
    }
}

void printIntMat(int[m,n] mat) {
    for (int i = 0, m) {
        for (int j = 0, n) {
            printInt(mat[i, j]);
            printSpaces(1);
        }
        printNewlines(1);
    }
}

void printFloatMat(float[m,n] mat) {
    for (int i = 0, m) {
        for (int j = 0, n) {
            printFloat(mat[j, i]);
            printSpaces(1);
        }
        printNewlines(1);
    }
}

void scanIntVec(int[n] vec) {    
    for (int i = 0, n) {
        vec[i] = scanInt();
    }

    printIntVec(vec);
}

void scanFloatVec(float[n] vec) {
    for (int i = 0, n) {
        vec[i] = scanFloat();
    }

    printFloatVec(vec);
}

void scanIntMat(int[m,n] mat) {
    for (int i = 0, m) {
        for (int j = 0, n) {
            mat[i,j] = scanInt();
        }
    }

    printIntMat(mat);
}

void scanFloatMat(float[m,n] mat) {
    for (int i = 0, m) {
        for (int j = 0, n) {
            mat[i,j] = scanFloat();
        }
    }

    printFloatMat(mat);
}

void matMul(float[m,n] a, float[o,p] b, float[q,l] c) {
    // Multiply first and second matrices and store result in c
    for (int i = 0, m) {
        for (int j = 0, n) {
            for (int k = 0, o) {
                c[i,j] = c[i,j] + a[i,k] * b[k,j];
            }
        }
    }

   printFloatMat(c);
}