Grammar

    0 $accept: program $end

    1 program: decls

    2 decls: decl decls
    3      | decl

    4 decl: fundef
    5     | globdecl
    6     | globdef

    7 fundef: EXPORT type ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
    8       | EXPORT type ID BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
    9       | type ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   10       | type ID BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   11       | EXTERN type ID BRACKET_L param BRACKET_R SEMICOLON
   12       | EXTERN type ID BRACKET_L BRACKET_R SEMICOLON
   13       | EXPORT VOIDTYPE ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   14       | EXPORT VOIDTYPE ID BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   15       | VOIDTYPE ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   16       | VOIDTYPE ID BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   17       | EXTERN VOIDTYPE ID BRACKET_L param BRACKET_R SEMICOLON
   18       | EXTERN VOIDTYPE ID BRACKET_L BRACKET_R SEMICOLON

   19 globdecl: EXTERN type ID SEMICOLON

   20 globdef: EXPORT type ID LET expr SEMICOLON
   21        | type ID LET expr SEMICOLON
   22        | EXPORT type ID SEMICOLON
   23        | type ID SEMICOLON

   24 param: type ID COMMA param
   25      | type ID

   26 funbody: vardecl stmts
   27        | vardecl
   28        | stmts
   29        | ε

   30 vardecl: type ID SEMICOLON
   31        | type ID LET expr SEMICOLON
   32        | type ID SEMICOLON vardecl
   33        | type ID LET expr SEMICOLON vardecl

   34 stmts: stmt stmts
   35      | stmt

   36 stmt: assign
   37     | ifelse
   38     | while
   39     | dowhile
   40     | for
   41     | return
   42     | expr SEMICOLON

   43 ifelse: IF BRACKET_L expr BRACKET_R block
   44       | IF BRACKET_L expr BRACKET_R block ELSE block

   45 while: WHILE BRACKET_L expr BRACKET_R block

   46 dowhile: DO block WHILE BRACKET_L expr BRACKET_R SEMICOLON

   47 for: FOR BRACKET_L INTTYPE ID LET expr COMMA expr COMMA expr BRACKET_R block
   48    | FOR BRACKET_L INTTYPE ID LET expr COMMA expr BRACKET_R block

   49 return: RETURN SEMICOLON
   50       | RETURN expr SEMICOLON

   51 block: CURLYBRACE_L stmts CURLYBRACE_R
   52      | CURLYBRACE_L CURLYBRACE_R
   53      | stmt

   54 funcall: ID BRACKET_L BRACKET_R
   55        | ID BRACKET_L exprs BRACKET_R

   56 expr: BRACKET_L expr BRACKET_R
   57     | expr PLUS expr
   58     | expr MINUS expr
   59     | expr SLASH expr
   60     | expr STAR expr
   61     | expr PERCENT expr
   62     | expr LE expr
   63     | expr LT expr
   64     | expr GE expr
   65     | expr GT expr
   66     | expr EQ expr
   67     | expr OR expr
   68     | expr AND expr
   69     | expr NE expr
   70     | MINUS expr
   71     | EXCLAMATION expr
   72     | BRACKET_L type BRACKET_R expr
   73     | funcall
   74     | var
   75     | constant

   76 exprs: expr
   77      | expr COMMA exprs

   78 assign: varlet LET expr SEMICOLON

   79 type: BOOLTYPE
   80     | FLOATTYPE
   81     | INTTYPE

   82 varlet: ID

   83 var: ID

   84 constant: floatval
   85         | intval
   86         | boolval

   87 floatval: FLOAT

   88 intval: NUM

   89 boolval: TRUEVAL
   90        | FALSEVAL


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    BRACKET_L (258) 7 8 9 10 11 12 13 14 15 16 17 18 43 44 45 46 47 48 54 55 56 72
    BRACKET_R (259) 7 8 9 10 11 12 13 14 15 16 17 18 43 44 45 46 47 48 54 55 56 72
    COMMA (260) 24 47 48 77
    SEMICOLON (261) 11 12 17 18 19 20 21 22 23 30 31 32 33 42 46 49 50 78
    CURLYBRACE_L (262) 7 8 9 10 13 14 15 16 51 52
    CURLYBRACE_R (263) 7 8 9 10 13 14 15 16 51 52
    MINUS (264) 58 70
    PLUS (265) 57
    STAR (266) 60
    SLASH (267) 59
    PERCENT (268) 61
    LE (269) 62
    LT (270) 63
    GE (271) 64
    GT (272) 65
    EQ (273) 66
    NE (274) 69
    OR (275) 67
    AND (276) 68
    EXCLAMATION (277) 71
    TRUEVAL (278) 89
    FALSEVAL (279) 90
    LET (280) 20 21 31 33 47 48 78
    INTTYPE (281) 47 48 81
    FLOATTYPE (282) 80
    BOOLTYPE (283) 79
    VOIDTYPE (284) 13 14 15 16 17 18
    NUM <cint> (285) 88
    FLOAT <cflt> (286) 87
    ID <id> (287) 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 30 31 32 33 47 48 54 55 82 83
    IF (288) 43 44
    ELSE (289) 44
    WHILE (290) 45 46
    DO (291) 46
    FOR (292) 47 48
    RETURN (293) 49 50
    EXTERN (294) 11 12 17 18 19
    EXPORT (295) 7 8 13 14 20 22
    THEN (296)
    MONOP_MINUS (297)
    TYPECAST (298)
    FUNCTIONCALL (299)


Nonterminals, with rules where they appear

    $accept (45)
        on left: 0
    program <node> (46)
        on left: 1
        on right: 0
    decls <node> (47)
        on left: 2 3
        on right: 1 2
    decl <node> (48)
        on left: 4 5 6
        on right: 2 3
    fundef <node> (49)
        on left: 7 8 9 10 11 12 13 14 15 16 17 18
        on right: 4
    globdecl <node> (50)
        on left: 19
        on right: 5
    globdef <node> (51)
        on left: 20 21 22 23
        on right: 6
    param <node> (52)
        on left: 24 25
        on right: 7 9 11 13 15 17 24
    funbody <node> (53)
        on left: 26 27 28 29
        on right: 7 8 9 10 13 14 15 16
    vardecl <node> (54)
        on left: 30 31 32 33
        on right: 26 27 32 33
    stmts <node> (55)
        on left: 34 35
        on right: 26 28 34 51
    stmt <node> (56)
        on left: 36 37 38 39 40 41 42
        on right: 34 35 53
    ifelse <node> (57)
        on left: 43 44
        on right: 37
    while <node> (58)
        on left: 45
        on right: 38
    dowhile <node> (59)
        on left: 46
        on right: 39
    for <node> (60)
        on left: 47 48
        on right: 40
    return <node> (61)
        on left: 49 50
        on right: 41
    block <node> (62)
        on left: 51 52 53
        on right: 43 44 45 46 47 48
    funcall <node> (63)
        on left: 54 55
        on right: 73
    expr <node> (64)
        on left: 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75
        on right: 20 21 31 33 42 43 44 45 46 47 48 50 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 76 77 78
    exprs <node> (65)
        on left: 76 77
        on right: 55 77
    assign <node> (66)
        on left: 78
        on right: 36
    type <ctype> (67)
        on left: 79 80 81
        on right: 7 8 9 10 11 12 19 20 21 22 23 24 25 30 31 32 33 72
    varlet <node> (68)
        on left: 82
        on right: 78
    var <node> (69)
        on left: 83
        on right: 74
    constant <node> (70)
        on left: 84 85 86
        on right: 75
    floatval <node> (71)
        on left: 87
        on right: 84
    intval <node> (72)
        on left: 88
        on right: 85
    boolval <node> (73)
        on left: 89 90
        on right: 86


State 0

    0 $accept: • program $end

    INTTYPE    shift, and go to state 1
    FLOATTYPE  shift, and go to state 2
    BOOLTYPE   shift, and go to state 3
    VOIDTYPE   shift, and go to state 4
    EXTERN     shift, and go to state 5
    EXPORT     shift, and go to state 6

    program   go to state 7
    decls     go to state 8
    decl      go to state 9
    fundef    go to state 10
    globdecl  go to state 11
    globdef   go to state 12
    type      go to state 13


State 1

   81 type: INTTYPE •

    $default  reduce using rule 81 (type)


State 2

   80 type: FLOATTYPE •

    $default  reduce using rule 80 (type)


State 3

   79 type: BOOLTYPE •

    $default  reduce using rule 79 (type)


State 4

   15 fundef: VOIDTYPE • ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   16       | VOIDTYPE • ID BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R

    ID  shift, and go to state 14


State 5

   11 fundef: EXTERN • type ID BRACKET_L param BRACKET_R SEMICOLON
   12       | EXTERN • type ID BRACKET_L BRACKET_R SEMICOLON
   17       | EXTERN • VOIDTYPE ID BRACKET_L param BRACKET_R SEMICOLON
   18       | EXTERN • VOIDTYPE ID BRACKET_L BRACKET_R SEMICOLON
   19 globdecl: EXTERN • type ID SEMICOLON

    INTTYPE    shift, and go to state 1
    FLOATTYPE  shift, and go to state 2
    BOOLTYPE   shift, and go to state 3
    VOIDTYPE   shift, and go to state 15

    type  go to state 16


State 6

    7 fundef: EXPORT • type ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
    8       | EXPORT • type ID BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   13       | EXPORT • VOIDTYPE ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   14       | EXPORT • VOIDTYPE ID BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   20 globdef: EXPORT • type ID LET expr SEMICOLON
   22        | EXPORT • type ID SEMICOLON

    INTTYPE    shift, and go to state 1
    FLOATTYPE  shift, and go to state 2
    BOOLTYPE   shift, and go to state 3
    VOIDTYPE   shift, and go to state 17

    type  go to state 18


State 7

    0 $accept: program • $end

    $end  shift, and go to state 19


State 8

    1 program: decls •

    $default  reduce using rule 1 (program)


State 9

    2 decls: decl • decls
    3      | decl •

    INTTYPE    shift, and go to state 1
    FLOATTYPE  shift, and go to state 2
    BOOLTYPE   shift, and go to state 3
    VOIDTYPE   shift, and go to state 4
    EXTERN     shift, and go to state 5
    EXPORT     shift, and go to state 6

    $default  reduce using rule 3 (decls)

    decls     go to state 20
    decl      go to state 9
    fundef    go to state 10
    globdecl  go to state 11
    globdef   go to state 12
    type      go to state 13


State 10

    4 decl: fundef •

    $default  reduce using rule 4 (decl)


State 11

    5 decl: globdecl •

    $default  reduce using rule 5 (decl)


State 12

    6 decl: globdef •

    $default  reduce using rule 6 (decl)


State 13

    9 fundef: type • ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   10       | type • ID BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   21 globdef: type • ID LET expr SEMICOLON
   23        | type • ID SEMICOLON

    ID  shift, and go to state 21


State 14

   15 fundef: VOIDTYPE ID • BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   16       | VOIDTYPE ID • BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R

    BRACKET_L  shift, and go to state 22


State 15

   17 fundef: EXTERN VOIDTYPE • ID BRACKET_L param BRACKET_R SEMICOLON
   18       | EXTERN VOIDTYPE • ID BRACKET_L BRACKET_R SEMICOLON

    ID  shift, and go to state 23


State 16

   11 fundef: EXTERN type • ID BRACKET_L param BRACKET_R SEMICOLON
   12       | EXTERN type • ID BRACKET_L BRACKET_R SEMICOLON
   19 globdecl: EXTERN type • ID SEMICOLON

    ID  shift, and go to state 24


State 17

   13 fundef: EXPORT VOIDTYPE • ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   14       | EXPORT VOIDTYPE • ID BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R

    ID  shift, and go to state 25


State 18

    7 fundef: EXPORT type • ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
    8       | EXPORT type • ID BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   20 globdef: EXPORT type • ID LET expr SEMICOLON
   22        | EXPORT type • ID SEMICOLON

    ID  shift, and go to state 26


State 19

    0 $accept: program $end •

    $default  accept


State 20

    2 decls: decl decls •

    $default  reduce using rule 2 (decls)


State 21

    9 fundef: type ID • BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   10       | type ID • BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   21 globdef: type ID • LET expr SEMICOLON
   23        | type ID • SEMICOLON

    BRACKET_L  shift, and go to state 27
    SEMICOLON  shift, and go to state 28
    LET        shift, and go to state 29


State 22

   15 fundef: VOIDTYPE ID BRACKET_L • param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   16       | VOIDTYPE ID BRACKET_L • BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R

    BRACKET_R  shift, and go to state 30
    INTTYPE    shift, and go to state 1
    FLOATTYPE  shift, and go to state 2
    BOOLTYPE   shift, and go to state 3

    param  go to state 31
    type   go to state 32


State 23

   17 fundef: EXTERN VOIDTYPE ID • BRACKET_L param BRACKET_R SEMICOLON
   18       | EXTERN VOIDTYPE ID • BRACKET_L BRACKET_R SEMICOLON

    BRACKET_L  shift, and go to state 33


State 24

   11 fundef: EXTERN type ID • BRACKET_L param BRACKET_R SEMICOLON
   12       | EXTERN type ID • BRACKET_L BRACKET_R SEMICOLON
   19 globdecl: EXTERN type ID • SEMICOLON

    BRACKET_L  shift, and go to state 34
    SEMICOLON  shift, and go to state 35


State 25

   13 fundef: EXPORT VOIDTYPE ID • BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   14       | EXPORT VOIDTYPE ID • BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R

    BRACKET_L  shift, and go to state 36


State 26

    7 fundef: EXPORT type ID • BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
    8       | EXPORT type ID • BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   20 globdef: EXPORT type ID • LET expr SEMICOLON
   22        | EXPORT type ID • SEMICOLON

    BRACKET_L  shift, and go to state 37
    SEMICOLON  shift, and go to state 38
    LET        shift, and go to state 39


State 27

    9 fundef: type ID BRACKET_L • param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   10       | type ID BRACKET_L • BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R

    BRACKET_R  shift, and go to state 40
    INTTYPE    shift, and go to state 1
    FLOATTYPE  shift, and go to state 2
    BOOLTYPE   shift, and go to state 3

    param  go to state 41
    type   go to state 32


State 28

   23 globdef: type ID SEMICOLON •

    $default  reduce using rule 23 (globdef)


State 29

   21 globdef: type ID LET • expr SEMICOLON

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 51
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 30

   16 fundef: VOIDTYPE ID BRACKET_L BRACKET_R • CURLYBRACE_L funbody CURLYBRACE_R

    CURLYBRACE_L  shift, and go to state 57


State 31

   15 fundef: VOIDTYPE ID BRACKET_L param • BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R

    BRACKET_R  shift, and go to state 58


State 32

   24 param: type • ID COMMA param
   25      | type • ID

    ID  shift, and go to state 59


State 33

   17 fundef: EXTERN VOIDTYPE ID BRACKET_L • param BRACKET_R SEMICOLON
   18       | EXTERN VOIDTYPE ID BRACKET_L • BRACKET_R SEMICOLON

    BRACKET_R  shift, and go to state 60
    INTTYPE    shift, and go to state 1
    FLOATTYPE  shift, and go to state 2
    BOOLTYPE   shift, and go to state 3

    param  go to state 61
    type   go to state 32


State 34

   11 fundef: EXTERN type ID BRACKET_L • param BRACKET_R SEMICOLON
   12       | EXTERN type ID BRACKET_L • BRACKET_R SEMICOLON

    BRACKET_R  shift, and go to state 62
    INTTYPE    shift, and go to state 1
    FLOATTYPE  shift, and go to state 2
    BOOLTYPE   shift, and go to state 3

    param  go to state 63
    type   go to state 32


State 35

   19 globdecl: EXTERN type ID SEMICOLON •

    $default  reduce using rule 19 (globdecl)


State 36

   13 fundef: EXPORT VOIDTYPE ID BRACKET_L • param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
   14       | EXPORT VOIDTYPE ID BRACKET_L • BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R

    BRACKET_R  shift, and go to state 64
    INTTYPE    shift, and go to state 1
    FLOATTYPE  shift, and go to state 2
    BOOLTYPE   shift, and go to state 3

    param  go to state 65
    type   go to state 32


State 37

    7 fundef: EXPORT type ID BRACKET_L • param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R
    8       | EXPORT type ID BRACKET_L • BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R

    BRACKET_R  shift, and go to state 66
    INTTYPE    shift, and go to state 1
    FLOATTYPE  shift, and go to state 2
    BOOLTYPE   shift, and go to state 3

    param  go to state 67
    type   go to state 32


State 38

   22 globdef: EXPORT type ID SEMICOLON •

    $default  reduce using rule 22 (globdef)


State 39

   20 globdef: EXPORT type ID LET • expr SEMICOLON

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 68
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 40

   10 fundef: type ID BRACKET_L BRACKET_R • CURLYBRACE_L funbody CURLYBRACE_R

    CURLYBRACE_L  shift, and go to state 69


State 41

    9 fundef: type ID BRACKET_L param • BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R

    BRACKET_R  shift, and go to state 70


State 42

   56 expr: BRACKET_L • expr BRACKET_R
   72     | BRACKET_L • type BRACKET_R expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    INTTYPE      shift, and go to state 1
    FLOATTYPE    shift, and go to state 2
    BOOLTYPE     shift, and go to state 3
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 71
    type      go to state 72
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 43

   70 expr: MINUS • expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 73
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 44

   71 expr: EXCLAMATION • expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 74
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 45

   89 boolval: TRUEVAL •

    $default  reduce using rule 89 (boolval)


State 46

   90 boolval: FALSEVAL •

    $default  reduce using rule 90 (boolval)


State 47

   88 intval: NUM •

    $default  reduce using rule 88 (intval)


State 48

   87 floatval: FLOAT •

    $default  reduce using rule 87 (floatval)


State 49

   54 funcall: ID • BRACKET_L BRACKET_R
   55        | ID • BRACKET_L exprs BRACKET_R
   83 var: ID •

    BRACKET_L  shift, and go to state 75

    $default  reduce using rule 83 (var)


State 50

   73 expr: funcall •

    $default  reduce using rule 73 (expr)


State 51

   21 globdef: type ID LET expr • SEMICOLON
   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    SEMICOLON  shift, and go to state 76
    MINUS      shift, and go to state 77
    PLUS       shift, and go to state 78
    STAR       shift, and go to state 79
    SLASH      shift, and go to state 80
    PERCENT    shift, and go to state 81
    LE         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    GT         shift, and go to state 85
    EQ         shift, and go to state 86
    NE         shift, and go to state 87
    OR         shift, and go to state 88
    AND        shift, and go to state 89


State 52

   74 expr: var •

    $default  reduce using rule 74 (expr)


State 53

   75 expr: constant •

    $default  reduce using rule 75 (expr)


State 54

   84 constant: floatval •

    $default  reduce using rule 84 (constant)


State 55

   85 constant: intval •

    $default  reduce using rule 85 (constant)


State 56

   86 constant: boolval •

    $default  reduce using rule 86 (constant)


State 57

   16 fundef: VOIDTYPE ID BRACKET_L BRACKET_R CURLYBRACE_L • funbody CURLYBRACE_R

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    INTTYPE      shift, and go to state 1
    FLOATTYPE    shift, and go to state 2
    BOOLTYPE     shift, and go to state 3
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 90
    IF           shift, and go to state 91
    WHILE        shift, and go to state 92
    DO           shift, and go to state 93
    FOR          shift, and go to state 94
    RETURN       shift, and go to state 95

    $default  reduce using rule 29 (funbody)

    funbody   go to state 96
    vardecl   go to state 97
    stmts     go to state 98
    stmt      go to state 99
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    type      go to state 107
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 58

   15 fundef: VOIDTYPE ID BRACKET_L param BRACKET_R • CURLYBRACE_L funbody CURLYBRACE_R

    CURLYBRACE_L  shift, and go to state 109


State 59

   24 param: type ID • COMMA param
   25      | type ID •

    COMMA  shift, and go to state 110

    $default  reduce using rule 25 (param)


State 60

   18 fundef: EXTERN VOIDTYPE ID BRACKET_L BRACKET_R • SEMICOLON

    SEMICOLON  shift, and go to state 111


State 61

   17 fundef: EXTERN VOIDTYPE ID BRACKET_L param • BRACKET_R SEMICOLON

    BRACKET_R  shift, and go to state 112


State 62

   12 fundef: EXTERN type ID BRACKET_L BRACKET_R • SEMICOLON

    SEMICOLON  shift, and go to state 113


State 63

   11 fundef: EXTERN type ID BRACKET_L param • BRACKET_R SEMICOLON

    BRACKET_R  shift, and go to state 114


State 64

   14 fundef: EXPORT VOIDTYPE ID BRACKET_L BRACKET_R • CURLYBRACE_L funbody CURLYBRACE_R

    CURLYBRACE_L  shift, and go to state 115


State 65

   13 fundef: EXPORT VOIDTYPE ID BRACKET_L param • BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R

    BRACKET_R  shift, and go to state 116


State 66

    8 fundef: EXPORT type ID BRACKET_L BRACKET_R • CURLYBRACE_L funbody CURLYBRACE_R

    CURLYBRACE_L  shift, and go to state 117


State 67

    7 fundef: EXPORT type ID BRACKET_L param • BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R

    BRACKET_R  shift, and go to state 118


State 68

   20 globdef: EXPORT type ID LET expr • SEMICOLON
   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    SEMICOLON  shift, and go to state 119
    MINUS      shift, and go to state 77
    PLUS       shift, and go to state 78
    STAR       shift, and go to state 79
    SLASH      shift, and go to state 80
    PERCENT    shift, and go to state 81
    LE         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    GT         shift, and go to state 85
    EQ         shift, and go to state 86
    NE         shift, and go to state 87
    OR         shift, and go to state 88
    AND        shift, and go to state 89


State 69

   10 fundef: type ID BRACKET_L BRACKET_R CURLYBRACE_L • funbody CURLYBRACE_R

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    INTTYPE      shift, and go to state 1
    FLOATTYPE    shift, and go to state 2
    BOOLTYPE     shift, and go to state 3
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 90
    IF           shift, and go to state 91
    WHILE        shift, and go to state 92
    DO           shift, and go to state 93
    FOR          shift, and go to state 94
    RETURN       shift, and go to state 95

    $default  reduce using rule 29 (funbody)

    funbody   go to state 120
    vardecl   go to state 97
    stmts     go to state 98
    stmt      go to state 99
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    type      go to state 107
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 70

    9 fundef: type ID BRACKET_L param BRACKET_R • CURLYBRACE_L funbody CURLYBRACE_R

    CURLYBRACE_L  shift, and go to state 121


State 71

   56 expr: BRACKET_L expr • BRACKET_R
   57     | expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    BRACKET_R  shift, and go to state 122
    MINUS      shift, and go to state 77
    PLUS       shift, and go to state 78
    STAR       shift, and go to state 79
    SLASH      shift, and go to state 80
    PERCENT    shift, and go to state 81
    LE         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    GT         shift, and go to state 85
    EQ         shift, and go to state 86
    NE         shift, and go to state 87
    OR         shift, and go to state 88
    AND        shift, and go to state 89


State 72

   72 expr: BRACKET_L type • BRACKET_R expr

    BRACKET_R  shift, and go to state 123


State 73

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr
   70     | MINUS expr •

    $default  reduce using rule 70 (expr)


State 74

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr
   71     | EXCLAMATION expr •

    $default  reduce using rule 71 (expr)


State 75

   54 funcall: ID BRACKET_L • BRACKET_R
   55        | ID BRACKET_L • exprs BRACKET_R

    BRACKET_L    shift, and go to state 42
    BRACKET_R    shift, and go to state 124
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 125
    exprs     go to state 126
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 76

   21 globdef: type ID LET expr SEMICOLON •

    $default  reduce using rule 21 (globdef)


State 77

   58 expr: expr MINUS • expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 127
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 78

   57 expr: expr PLUS • expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 128
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 79

   60 expr: expr STAR • expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 129
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 80

   59 expr: expr SLASH • expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 130
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 81

   61 expr: expr PERCENT • expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 131
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 82

   62 expr: expr LE • expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 132
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 83

   63 expr: expr LT • expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 133
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 84

   64 expr: expr GE • expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 134
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 85

   65 expr: expr GT • expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 135
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 86

   66 expr: expr EQ • expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 136
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 87

   69 expr: expr NE • expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 137
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 88

   67 expr: expr OR • expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 138
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 89

   68 expr: expr AND • expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 139
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 90

   54 funcall: ID • BRACKET_L BRACKET_R
   55        | ID • BRACKET_L exprs BRACKET_R
   82 varlet: ID •
   83 var: ID •

    BRACKET_L  shift, and go to state 75

    LET       reduce using rule 82 (varlet)
    $default  reduce using rule 83 (var)


State 91

   43 ifelse: IF • BRACKET_L expr BRACKET_R block
   44       | IF • BRACKET_L expr BRACKET_R block ELSE block

    BRACKET_L  shift, and go to state 140


State 92

   45 while: WHILE • BRACKET_L expr BRACKET_R block

    BRACKET_L  shift, and go to state 141


State 93

   46 dowhile: DO • block WHILE BRACKET_L expr BRACKET_R SEMICOLON

    BRACKET_L     shift, and go to state 42
    CURLYBRACE_L  shift, and go to state 142
    MINUS         shift, and go to state 43
    EXCLAMATION   shift, and go to state 44
    TRUEVAL       shift, and go to state 45
    FALSEVAL      shift, and go to state 46
    NUM           shift, and go to state 47
    FLOAT         shift, and go to state 48
    ID            shift, and go to state 90
    IF            shift, and go to state 91
    WHILE         shift, and go to state 92
    DO            shift, and go to state 93
    FOR           shift, and go to state 94
    RETURN        shift, and go to state 95

    stmt      go to state 143
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    block     go to state 144
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 94

   47 for: FOR • BRACKET_L INTTYPE ID LET expr COMMA expr COMMA expr BRACKET_R block
   48    | FOR • BRACKET_L INTTYPE ID LET expr COMMA expr BRACKET_R block

    BRACKET_L  shift, and go to state 145


State 95

   49 return: RETURN • SEMICOLON
   50       | RETURN • expr SEMICOLON

    BRACKET_L    shift, and go to state 42
    SEMICOLON    shift, and go to state 146
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 147
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 96

   16 fundef: VOIDTYPE ID BRACKET_L BRACKET_R CURLYBRACE_L funbody • CURLYBRACE_R

    CURLYBRACE_R  shift, and go to state 148


State 97

   26 funbody: vardecl • stmts
   27        | vardecl •

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 90
    IF           shift, and go to state 91
    WHILE        shift, and go to state 92
    DO           shift, and go to state 93
    FOR          shift, and go to state 94
    RETURN       shift, and go to state 95

    $default  reduce using rule 27 (funbody)

    stmts     go to state 149
    stmt      go to state 99
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 98

   28 funbody: stmts •

    $default  reduce using rule 28 (funbody)


State 99

   34 stmts: stmt • stmts
   35      | stmt •

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 90
    IF           shift, and go to state 91
    WHILE        shift, and go to state 92
    DO           shift, and go to state 93
    FOR          shift, and go to state 94
    RETURN       shift, and go to state 95

    $default  reduce using rule 35 (stmts)

    stmts     go to state 150
    stmt      go to state 99
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 100

   37 stmt: ifelse •

    $default  reduce using rule 37 (stmt)


State 101

   38 stmt: while •

    $default  reduce using rule 38 (stmt)


State 102

   39 stmt: dowhile •

    $default  reduce using rule 39 (stmt)


State 103

   40 stmt: for •

    $default  reduce using rule 40 (stmt)


State 104

   41 stmt: return •

    $default  reduce using rule 41 (stmt)


State 105

   42 stmt: expr • SEMICOLON
   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    SEMICOLON  shift, and go to state 151
    MINUS      shift, and go to state 77
    PLUS       shift, and go to state 78
    STAR       shift, and go to state 79
    SLASH      shift, and go to state 80
    PERCENT    shift, and go to state 81
    LE         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    GT         shift, and go to state 85
    EQ         shift, and go to state 86
    NE         shift, and go to state 87
    OR         shift, and go to state 88
    AND        shift, and go to state 89


State 106

   36 stmt: assign •

    $default  reduce using rule 36 (stmt)


State 107

   30 vardecl: type • ID SEMICOLON
   31        | type • ID LET expr SEMICOLON
   32        | type • ID SEMICOLON vardecl
   33        | type • ID LET expr SEMICOLON vardecl

    ID  shift, and go to state 152


State 108

   78 assign: varlet • LET expr SEMICOLON

    LET  shift, and go to state 153


State 109

   15 fundef: VOIDTYPE ID BRACKET_L param BRACKET_R CURLYBRACE_L • funbody CURLYBRACE_R

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    INTTYPE      shift, and go to state 1
    FLOATTYPE    shift, and go to state 2
    BOOLTYPE     shift, and go to state 3
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 90
    IF           shift, and go to state 91
    WHILE        shift, and go to state 92
    DO           shift, and go to state 93
    FOR          shift, and go to state 94
    RETURN       shift, and go to state 95

    $default  reduce using rule 29 (funbody)

    funbody   go to state 154
    vardecl   go to state 97
    stmts     go to state 98
    stmt      go to state 99
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    type      go to state 107
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 110

   24 param: type ID COMMA • param

    INTTYPE    shift, and go to state 1
    FLOATTYPE  shift, and go to state 2
    BOOLTYPE   shift, and go to state 3

    param  go to state 155
    type   go to state 32


State 111

   18 fundef: EXTERN VOIDTYPE ID BRACKET_L BRACKET_R SEMICOLON •

    $default  reduce using rule 18 (fundef)


State 112

   17 fundef: EXTERN VOIDTYPE ID BRACKET_L param BRACKET_R • SEMICOLON

    SEMICOLON  shift, and go to state 156


State 113

   12 fundef: EXTERN type ID BRACKET_L BRACKET_R SEMICOLON •

    $default  reduce using rule 12 (fundef)


State 114

   11 fundef: EXTERN type ID BRACKET_L param BRACKET_R • SEMICOLON

    SEMICOLON  shift, and go to state 157


State 115

   14 fundef: EXPORT VOIDTYPE ID BRACKET_L BRACKET_R CURLYBRACE_L • funbody CURLYBRACE_R

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    INTTYPE      shift, and go to state 1
    FLOATTYPE    shift, and go to state 2
    BOOLTYPE     shift, and go to state 3
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 90
    IF           shift, and go to state 91
    WHILE        shift, and go to state 92
    DO           shift, and go to state 93
    FOR          shift, and go to state 94
    RETURN       shift, and go to state 95

    $default  reduce using rule 29 (funbody)

    funbody   go to state 158
    vardecl   go to state 97
    stmts     go to state 98
    stmt      go to state 99
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    type      go to state 107
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 116

   13 fundef: EXPORT VOIDTYPE ID BRACKET_L param BRACKET_R • CURLYBRACE_L funbody CURLYBRACE_R

    CURLYBRACE_L  shift, and go to state 159


State 117

    8 fundef: EXPORT type ID BRACKET_L BRACKET_R CURLYBRACE_L • funbody CURLYBRACE_R

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    INTTYPE      shift, and go to state 1
    FLOATTYPE    shift, and go to state 2
    BOOLTYPE     shift, and go to state 3
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 90
    IF           shift, and go to state 91
    WHILE        shift, and go to state 92
    DO           shift, and go to state 93
    FOR          shift, and go to state 94
    RETURN       shift, and go to state 95

    $default  reduce using rule 29 (funbody)

    funbody   go to state 160
    vardecl   go to state 97
    stmts     go to state 98
    stmt      go to state 99
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    type      go to state 107
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 118

    7 fundef: EXPORT type ID BRACKET_L param BRACKET_R • CURLYBRACE_L funbody CURLYBRACE_R

    CURLYBRACE_L  shift, and go to state 161


State 119

   20 globdef: EXPORT type ID LET expr SEMICOLON •

    $default  reduce using rule 20 (globdef)


State 120

   10 fundef: type ID BRACKET_L BRACKET_R CURLYBRACE_L funbody • CURLYBRACE_R

    CURLYBRACE_R  shift, and go to state 162


State 121

    9 fundef: type ID BRACKET_L param BRACKET_R CURLYBRACE_L • funbody CURLYBRACE_R

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    INTTYPE      shift, and go to state 1
    FLOATTYPE    shift, and go to state 2
    BOOLTYPE     shift, and go to state 3
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 90
    IF           shift, and go to state 91
    WHILE        shift, and go to state 92
    DO           shift, and go to state 93
    FOR          shift, and go to state 94
    RETURN       shift, and go to state 95

    $default  reduce using rule 29 (funbody)

    funbody   go to state 163
    vardecl   go to state 97
    stmts     go to state 98
    stmt      go to state 99
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    type      go to state 107
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 122

   56 expr: BRACKET_L expr BRACKET_R •

    $default  reduce using rule 56 (expr)


State 123

   72 expr: BRACKET_L type BRACKET_R • expr

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 164
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 124

   54 funcall: ID BRACKET_L BRACKET_R •

    $default  reduce using rule 54 (funcall)


State 125

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr
   76 exprs: expr •
   77      | expr • COMMA exprs

    COMMA    shift, and go to state 165
    MINUS    shift, and go to state 77
    PLUS     shift, and go to state 78
    STAR     shift, and go to state 79
    SLASH    shift, and go to state 80
    PERCENT  shift, and go to state 81
    LE       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    GT       shift, and go to state 85
    EQ       shift, and go to state 86
    NE       shift, and go to state 87
    OR       shift, and go to state 88
    AND      shift, and go to state 89

    $default  reduce using rule 76 (exprs)


State 126

   55 funcall: ID BRACKET_L exprs • BRACKET_R

    BRACKET_R  shift, and go to state 166


State 127

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   58     | expr MINUS expr •
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    STAR     shift, and go to state 79
    SLASH    shift, and go to state 80
    PERCENT  shift, and go to state 81

    $default  reduce using rule 58 (expr)


State 128

   57 expr: expr • PLUS expr
   57     | expr PLUS expr •
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    STAR     shift, and go to state 79
    SLASH    shift, and go to state 80
    PERCENT  shift, and go to state 81

    $default  reduce using rule 57 (expr)


State 129

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   60     | expr STAR expr •
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    $default  reduce using rule 60 (expr)


State 130

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   59     | expr SLASH expr •
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    $default  reduce using rule 59 (expr)


State 131

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   61     | expr PERCENT expr •
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    $default  reduce using rule 61 (expr)


State 132

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   62     | expr LE expr •
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    MINUS    shift, and go to state 77
    PLUS     shift, and go to state 78
    STAR     shift, and go to state 79
    SLASH    shift, and go to state 80
    PERCENT  shift, and go to state 81

    $default  reduce using rule 62 (expr)


State 133

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   63     | expr LT expr •
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    MINUS    shift, and go to state 77
    PLUS     shift, and go to state 78
    STAR     shift, and go to state 79
    SLASH    shift, and go to state 80
    PERCENT  shift, and go to state 81

    $default  reduce using rule 63 (expr)


State 134

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   64     | expr GE expr •
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    MINUS    shift, and go to state 77
    PLUS     shift, and go to state 78
    STAR     shift, and go to state 79
    SLASH    shift, and go to state 80
    PERCENT  shift, and go to state 81

    $default  reduce using rule 64 (expr)


State 135

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   65     | expr GT expr •
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    MINUS    shift, and go to state 77
    PLUS     shift, and go to state 78
    STAR     shift, and go to state 79
    SLASH    shift, and go to state 80
    PERCENT  shift, and go to state 81

    $default  reduce using rule 65 (expr)


State 136

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   66     | expr EQ expr •
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    MINUS    shift, and go to state 77
    PLUS     shift, and go to state 78
    STAR     shift, and go to state 79
    SLASH    shift, and go to state 80
    PERCENT  shift, and go to state 81
    LE       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    GT       shift, and go to state 85

    $default  reduce using rule 66 (expr)


State 137

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr
   69     | expr NE expr •

    MINUS    shift, and go to state 77
    PLUS     shift, and go to state 78
    STAR     shift, and go to state 79
    SLASH    shift, and go to state 80
    PERCENT  shift, and go to state 81
    LE       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    GT       shift, and go to state 85

    $default  reduce using rule 69 (expr)


State 138

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   67     | expr OR expr •
   68     | expr • AND expr
   69     | expr • NE expr

    MINUS    shift, and go to state 77
    PLUS     shift, and go to state 78
    STAR     shift, and go to state 79
    SLASH    shift, and go to state 80
    PERCENT  shift, and go to state 81
    LE       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    GT       shift, and go to state 85
    EQ       shift, and go to state 86
    NE       shift, and go to state 87
    AND      shift, and go to state 89

    $default  reduce using rule 67 (expr)


State 139

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   68     | expr AND expr •
   69     | expr • NE expr

    MINUS    shift, and go to state 77
    PLUS     shift, and go to state 78
    STAR     shift, and go to state 79
    SLASH    shift, and go to state 80
    PERCENT  shift, and go to state 81
    LE       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    GT       shift, and go to state 85
    EQ       shift, and go to state 86
    NE       shift, and go to state 87

    $default  reduce using rule 68 (expr)


State 140

   43 ifelse: IF BRACKET_L • expr BRACKET_R block
   44       | IF BRACKET_L • expr BRACKET_R block ELSE block

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 167
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 141

   45 while: WHILE BRACKET_L • expr BRACKET_R block

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 168
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 142

   51 block: CURLYBRACE_L • stmts CURLYBRACE_R
   52      | CURLYBRACE_L • CURLYBRACE_R

    BRACKET_L     shift, and go to state 42
    CURLYBRACE_R  shift, and go to state 169
    MINUS         shift, and go to state 43
    EXCLAMATION   shift, and go to state 44
    TRUEVAL       shift, and go to state 45
    FALSEVAL      shift, and go to state 46
    NUM           shift, and go to state 47
    FLOAT         shift, and go to state 48
    ID            shift, and go to state 90
    IF            shift, and go to state 91
    WHILE         shift, and go to state 92
    DO            shift, and go to state 93
    FOR           shift, and go to state 94
    RETURN        shift, and go to state 95

    stmts     go to state 170
    stmt      go to state 99
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 143

   53 block: stmt •

    $default  reduce using rule 53 (block)


State 144

   46 dowhile: DO block • WHILE BRACKET_L expr BRACKET_R SEMICOLON

    WHILE  shift, and go to state 171


State 145

   47 for: FOR BRACKET_L • INTTYPE ID LET expr COMMA expr COMMA expr BRACKET_R block
   48    | FOR BRACKET_L • INTTYPE ID LET expr COMMA expr BRACKET_R block

    INTTYPE  shift, and go to state 172


State 146

   49 return: RETURN SEMICOLON •

    $default  reduce using rule 49 (return)


State 147

   50 return: RETURN expr • SEMICOLON
   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    SEMICOLON  shift, and go to state 173
    MINUS      shift, and go to state 77
    PLUS       shift, and go to state 78
    STAR       shift, and go to state 79
    SLASH      shift, and go to state 80
    PERCENT    shift, and go to state 81
    LE         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    GT         shift, and go to state 85
    EQ         shift, and go to state 86
    NE         shift, and go to state 87
    OR         shift, and go to state 88
    AND        shift, and go to state 89


State 148

   16 fundef: VOIDTYPE ID BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R •

    $default  reduce using rule 16 (fundef)


State 149

   26 funbody: vardecl stmts •

    $default  reduce using rule 26 (funbody)


State 150

   34 stmts: stmt stmts •

    $default  reduce using rule 34 (stmts)


State 151

   42 stmt: expr SEMICOLON •

    $default  reduce using rule 42 (stmt)


State 152

   30 vardecl: type ID • SEMICOLON
   31        | type ID • LET expr SEMICOLON
   32        | type ID • SEMICOLON vardecl
   33        | type ID • LET expr SEMICOLON vardecl

    SEMICOLON  shift, and go to state 174
    LET        shift, and go to state 175


State 153

   78 assign: varlet LET • expr SEMICOLON

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 176
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 154

   15 fundef: VOIDTYPE ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody • CURLYBRACE_R

    CURLYBRACE_R  shift, and go to state 177


State 155

   24 param: type ID COMMA param •

    $default  reduce using rule 24 (param)


State 156

   17 fundef: EXTERN VOIDTYPE ID BRACKET_L param BRACKET_R SEMICOLON •

    $default  reduce using rule 17 (fundef)


State 157

   11 fundef: EXTERN type ID BRACKET_L param BRACKET_R SEMICOLON •

    $default  reduce using rule 11 (fundef)


State 158

   14 fundef: EXPORT VOIDTYPE ID BRACKET_L BRACKET_R CURLYBRACE_L funbody • CURLYBRACE_R

    CURLYBRACE_R  shift, and go to state 178


State 159

   13 fundef: EXPORT VOIDTYPE ID BRACKET_L param BRACKET_R CURLYBRACE_L • funbody CURLYBRACE_R

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    INTTYPE      shift, and go to state 1
    FLOATTYPE    shift, and go to state 2
    BOOLTYPE     shift, and go to state 3
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 90
    IF           shift, and go to state 91
    WHILE        shift, and go to state 92
    DO           shift, and go to state 93
    FOR          shift, and go to state 94
    RETURN       shift, and go to state 95

    $default  reduce using rule 29 (funbody)

    funbody   go to state 179
    vardecl   go to state 97
    stmts     go to state 98
    stmt      go to state 99
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    type      go to state 107
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 160

    8 fundef: EXPORT type ID BRACKET_L BRACKET_R CURLYBRACE_L funbody • CURLYBRACE_R

    CURLYBRACE_R  shift, and go to state 180


State 161

    7 fundef: EXPORT type ID BRACKET_L param BRACKET_R CURLYBRACE_L • funbody CURLYBRACE_R

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    INTTYPE      shift, and go to state 1
    FLOATTYPE    shift, and go to state 2
    BOOLTYPE     shift, and go to state 3
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 90
    IF           shift, and go to state 91
    WHILE        shift, and go to state 92
    DO           shift, and go to state 93
    FOR          shift, and go to state 94
    RETURN       shift, and go to state 95

    $default  reduce using rule 29 (funbody)

    funbody   go to state 181
    vardecl   go to state 97
    stmts     go to state 98
    stmt      go to state 99
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    type      go to state 107
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 162

   10 fundef: type ID BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R •

    $default  reduce using rule 10 (fundef)


State 163

    9 fundef: type ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody • CURLYBRACE_R

    CURLYBRACE_R  shift, and go to state 182


State 164

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr
   72     | BRACKET_L type BRACKET_R expr •

    $default  reduce using rule 72 (expr)


State 165

   77 exprs: expr COMMA • exprs

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 125
    exprs     go to state 183
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 166

   55 funcall: ID BRACKET_L exprs BRACKET_R •

    $default  reduce using rule 55 (funcall)


State 167

   43 ifelse: IF BRACKET_L expr • BRACKET_R block
   44       | IF BRACKET_L expr • BRACKET_R block ELSE block
   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    BRACKET_R  shift, and go to state 184
    MINUS      shift, and go to state 77
    PLUS       shift, and go to state 78
    STAR       shift, and go to state 79
    SLASH      shift, and go to state 80
    PERCENT    shift, and go to state 81
    LE         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    GT         shift, and go to state 85
    EQ         shift, and go to state 86
    NE         shift, and go to state 87
    OR         shift, and go to state 88
    AND        shift, and go to state 89


State 168

   45 while: WHILE BRACKET_L expr • BRACKET_R block
   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    BRACKET_R  shift, and go to state 185
    MINUS      shift, and go to state 77
    PLUS       shift, and go to state 78
    STAR       shift, and go to state 79
    SLASH      shift, and go to state 80
    PERCENT    shift, and go to state 81
    LE         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    GT         shift, and go to state 85
    EQ         shift, and go to state 86
    NE         shift, and go to state 87
    OR         shift, and go to state 88
    AND        shift, and go to state 89


State 169

   52 block: CURLYBRACE_L CURLYBRACE_R •

    $default  reduce using rule 52 (block)


State 170

   51 block: CURLYBRACE_L stmts • CURLYBRACE_R

    CURLYBRACE_R  shift, and go to state 186


State 171

   46 dowhile: DO block WHILE • BRACKET_L expr BRACKET_R SEMICOLON

    BRACKET_L  shift, and go to state 187


State 172

   47 for: FOR BRACKET_L INTTYPE • ID LET expr COMMA expr COMMA expr BRACKET_R block
   48    | FOR BRACKET_L INTTYPE • ID LET expr COMMA expr BRACKET_R block

    ID  shift, and go to state 188


State 173

   50 return: RETURN expr SEMICOLON •

    $default  reduce using rule 50 (return)


State 174

   30 vardecl: type ID SEMICOLON •
   32        | type ID SEMICOLON • vardecl

    INTTYPE    shift, and go to state 1
    FLOATTYPE  shift, and go to state 2
    BOOLTYPE   shift, and go to state 3

    $default  reduce using rule 30 (vardecl)

    vardecl  go to state 189
    type     go to state 107


State 175

   31 vardecl: type ID LET • expr SEMICOLON
   33        | type ID LET • expr SEMICOLON vardecl

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 190
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 176

   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr
   78 assign: varlet LET expr • SEMICOLON

    SEMICOLON  shift, and go to state 191
    MINUS      shift, and go to state 77
    PLUS       shift, and go to state 78
    STAR       shift, and go to state 79
    SLASH      shift, and go to state 80
    PERCENT    shift, and go to state 81
    LE         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    GT         shift, and go to state 85
    EQ         shift, and go to state 86
    NE         shift, and go to state 87
    OR         shift, and go to state 88
    AND        shift, and go to state 89


State 177

   15 fundef: VOIDTYPE ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R •

    $default  reduce using rule 15 (fundef)


State 178

   14 fundef: EXPORT VOIDTYPE ID BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R •

    $default  reduce using rule 14 (fundef)


State 179

   13 fundef: EXPORT VOIDTYPE ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody • CURLYBRACE_R

    CURLYBRACE_R  shift, and go to state 192


State 180

    8 fundef: EXPORT type ID BRACKET_L BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R •

    $default  reduce using rule 8 (fundef)


State 181

    7 fundef: EXPORT type ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody • CURLYBRACE_R

    CURLYBRACE_R  shift, and go to state 193


State 182

    9 fundef: type ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R •

    $default  reduce using rule 9 (fundef)


State 183

   77 exprs: expr COMMA exprs •

    $default  reduce using rule 77 (exprs)


State 184

   43 ifelse: IF BRACKET_L expr BRACKET_R • block
   44       | IF BRACKET_L expr BRACKET_R • block ELSE block

    BRACKET_L     shift, and go to state 42
    CURLYBRACE_L  shift, and go to state 142
    MINUS         shift, and go to state 43
    EXCLAMATION   shift, and go to state 44
    TRUEVAL       shift, and go to state 45
    FALSEVAL      shift, and go to state 46
    NUM           shift, and go to state 47
    FLOAT         shift, and go to state 48
    ID            shift, and go to state 90
    IF            shift, and go to state 91
    WHILE         shift, and go to state 92
    DO            shift, and go to state 93
    FOR           shift, and go to state 94
    RETURN        shift, and go to state 95

    stmt      go to state 143
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    block     go to state 194
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 185

   45 while: WHILE BRACKET_L expr BRACKET_R • block

    BRACKET_L     shift, and go to state 42
    CURLYBRACE_L  shift, and go to state 142
    MINUS         shift, and go to state 43
    EXCLAMATION   shift, and go to state 44
    TRUEVAL       shift, and go to state 45
    FALSEVAL      shift, and go to state 46
    NUM           shift, and go to state 47
    FLOAT         shift, and go to state 48
    ID            shift, and go to state 90
    IF            shift, and go to state 91
    WHILE         shift, and go to state 92
    DO            shift, and go to state 93
    FOR           shift, and go to state 94
    RETURN        shift, and go to state 95

    stmt      go to state 143
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    block     go to state 195
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 186

   51 block: CURLYBRACE_L stmts CURLYBRACE_R •

    $default  reduce using rule 51 (block)


State 187

   46 dowhile: DO block WHILE BRACKET_L • expr BRACKET_R SEMICOLON

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 196
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 188

   47 for: FOR BRACKET_L INTTYPE ID • LET expr COMMA expr COMMA expr BRACKET_R block
   48    | FOR BRACKET_L INTTYPE ID • LET expr COMMA expr BRACKET_R block

    LET  shift, and go to state 197


State 189

   32 vardecl: type ID SEMICOLON vardecl •

    $default  reduce using rule 32 (vardecl)


State 190

   31 vardecl: type ID LET expr • SEMICOLON
   33        | type ID LET expr • SEMICOLON vardecl
   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    SEMICOLON  shift, and go to state 198
    MINUS      shift, and go to state 77
    PLUS       shift, and go to state 78
    STAR       shift, and go to state 79
    SLASH      shift, and go to state 80
    PERCENT    shift, and go to state 81
    LE         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    GT         shift, and go to state 85
    EQ         shift, and go to state 86
    NE         shift, and go to state 87
    OR         shift, and go to state 88
    AND        shift, and go to state 89


State 191

   78 assign: varlet LET expr SEMICOLON •

    $default  reduce using rule 78 (assign)


State 192

   13 fundef: EXPORT VOIDTYPE ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R •

    $default  reduce using rule 13 (fundef)


State 193

    7 fundef: EXPORT type ID BRACKET_L param BRACKET_R CURLYBRACE_L funbody CURLYBRACE_R •

    $default  reduce using rule 7 (fundef)


State 194

   43 ifelse: IF BRACKET_L expr BRACKET_R block •
   44       | IF BRACKET_L expr BRACKET_R block • ELSE block

    ELSE  shift, and go to state 199

    $default  reduce using rule 43 (ifelse)


State 195

   45 while: WHILE BRACKET_L expr BRACKET_R block •

    $default  reduce using rule 45 (while)


State 196

   46 dowhile: DO block WHILE BRACKET_L expr • BRACKET_R SEMICOLON
   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    BRACKET_R  shift, and go to state 200
    MINUS      shift, and go to state 77
    PLUS       shift, and go to state 78
    STAR       shift, and go to state 79
    SLASH      shift, and go to state 80
    PERCENT    shift, and go to state 81
    LE         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    GT         shift, and go to state 85
    EQ         shift, and go to state 86
    NE         shift, and go to state 87
    OR         shift, and go to state 88
    AND        shift, and go to state 89


State 197

   47 for: FOR BRACKET_L INTTYPE ID LET • expr COMMA expr COMMA expr BRACKET_R block
   48    | FOR BRACKET_L INTTYPE ID LET • expr COMMA expr BRACKET_R block

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 201
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 198

   31 vardecl: type ID LET expr SEMICOLON •
   33        | type ID LET expr SEMICOLON • vardecl

    INTTYPE    shift, and go to state 1
    FLOATTYPE  shift, and go to state 2
    BOOLTYPE   shift, and go to state 3

    $default  reduce using rule 31 (vardecl)

    vardecl  go to state 202
    type     go to state 107


State 199

   44 ifelse: IF BRACKET_L expr BRACKET_R block ELSE • block

    BRACKET_L     shift, and go to state 42
    CURLYBRACE_L  shift, and go to state 142
    MINUS         shift, and go to state 43
    EXCLAMATION   shift, and go to state 44
    TRUEVAL       shift, and go to state 45
    FALSEVAL      shift, and go to state 46
    NUM           shift, and go to state 47
    FLOAT         shift, and go to state 48
    ID            shift, and go to state 90
    IF            shift, and go to state 91
    WHILE         shift, and go to state 92
    DO            shift, and go to state 93
    FOR           shift, and go to state 94
    RETURN        shift, and go to state 95

    stmt      go to state 143
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    block     go to state 203
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 200

   46 dowhile: DO block WHILE BRACKET_L expr BRACKET_R • SEMICOLON

    SEMICOLON  shift, and go to state 204


State 201

   47 for: FOR BRACKET_L INTTYPE ID LET expr • COMMA expr COMMA expr BRACKET_R block
   48    | FOR BRACKET_L INTTYPE ID LET expr • COMMA expr BRACKET_R block
   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    COMMA    shift, and go to state 205
    MINUS    shift, and go to state 77
    PLUS     shift, and go to state 78
    STAR     shift, and go to state 79
    SLASH    shift, and go to state 80
    PERCENT  shift, and go to state 81
    LE       shift, and go to state 82
    LT       shift, and go to state 83
    GE       shift, and go to state 84
    GT       shift, and go to state 85
    EQ       shift, and go to state 86
    NE       shift, and go to state 87
    OR       shift, and go to state 88
    AND      shift, and go to state 89


State 202

   33 vardecl: type ID LET expr SEMICOLON vardecl •

    $default  reduce using rule 33 (vardecl)


State 203

   44 ifelse: IF BRACKET_L expr BRACKET_R block ELSE block •

    $default  reduce using rule 44 (ifelse)


State 204

   46 dowhile: DO block WHILE BRACKET_L expr BRACKET_R SEMICOLON •

    $default  reduce using rule 46 (dowhile)


State 205

   47 for: FOR BRACKET_L INTTYPE ID LET expr COMMA • expr COMMA expr BRACKET_R block
   48    | FOR BRACKET_L INTTYPE ID LET expr COMMA • expr BRACKET_R block

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 206
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 206

   47 for: FOR BRACKET_L INTTYPE ID LET expr COMMA expr • COMMA expr BRACKET_R block
   48    | FOR BRACKET_L INTTYPE ID LET expr COMMA expr • BRACKET_R block
   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    BRACKET_R  shift, and go to state 207
    COMMA      shift, and go to state 208
    MINUS      shift, and go to state 77
    PLUS       shift, and go to state 78
    STAR       shift, and go to state 79
    SLASH      shift, and go to state 80
    PERCENT    shift, and go to state 81
    LE         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    GT         shift, and go to state 85
    EQ         shift, and go to state 86
    NE         shift, and go to state 87
    OR         shift, and go to state 88
    AND        shift, and go to state 89


State 207

   48 for: FOR BRACKET_L INTTYPE ID LET expr COMMA expr BRACKET_R • block

    BRACKET_L     shift, and go to state 42
    CURLYBRACE_L  shift, and go to state 142
    MINUS         shift, and go to state 43
    EXCLAMATION   shift, and go to state 44
    TRUEVAL       shift, and go to state 45
    FALSEVAL      shift, and go to state 46
    NUM           shift, and go to state 47
    FLOAT         shift, and go to state 48
    ID            shift, and go to state 90
    IF            shift, and go to state 91
    WHILE         shift, and go to state 92
    DO            shift, and go to state 93
    FOR           shift, and go to state 94
    RETURN        shift, and go to state 95

    stmt      go to state 143
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    block     go to state 209
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 208

   47 for: FOR BRACKET_L INTTYPE ID LET expr COMMA expr COMMA • expr BRACKET_R block

    BRACKET_L    shift, and go to state 42
    MINUS        shift, and go to state 43
    EXCLAMATION  shift, and go to state 44
    TRUEVAL      shift, and go to state 45
    FALSEVAL     shift, and go to state 46
    NUM          shift, and go to state 47
    FLOAT        shift, and go to state 48
    ID           shift, and go to state 49

    funcall   go to state 50
    expr      go to state 210
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 209

   48 for: FOR BRACKET_L INTTYPE ID LET expr COMMA expr BRACKET_R block •

    $default  reduce using rule 48 (for)


State 210

   47 for: FOR BRACKET_L INTTYPE ID LET expr COMMA expr COMMA expr • BRACKET_R block
   57 expr: expr • PLUS expr
   58     | expr • MINUS expr
   59     | expr • SLASH expr
   60     | expr • STAR expr
   61     | expr • PERCENT expr
   62     | expr • LE expr
   63     | expr • LT expr
   64     | expr • GE expr
   65     | expr • GT expr
   66     | expr • EQ expr
   67     | expr • OR expr
   68     | expr • AND expr
   69     | expr • NE expr

    BRACKET_R  shift, and go to state 211
    MINUS      shift, and go to state 77
    PLUS       shift, and go to state 78
    STAR       shift, and go to state 79
    SLASH      shift, and go to state 80
    PERCENT    shift, and go to state 81
    LE         shift, and go to state 82
    LT         shift, and go to state 83
    GE         shift, and go to state 84
    GT         shift, and go to state 85
    EQ         shift, and go to state 86
    NE         shift, and go to state 87
    OR         shift, and go to state 88
    AND        shift, and go to state 89


State 211

   47 for: FOR BRACKET_L INTTYPE ID LET expr COMMA expr COMMA expr BRACKET_R • block

    BRACKET_L     shift, and go to state 42
    CURLYBRACE_L  shift, and go to state 142
    MINUS         shift, and go to state 43
    EXCLAMATION   shift, and go to state 44
    TRUEVAL       shift, and go to state 45
    FALSEVAL      shift, and go to state 46
    NUM           shift, and go to state 47
    FLOAT         shift, and go to state 48
    ID            shift, and go to state 90
    IF            shift, and go to state 91
    WHILE         shift, and go to state 92
    DO            shift, and go to state 93
    FOR           shift, and go to state 94
    RETURN        shift, and go to state 95

    stmt      go to state 143
    ifelse    go to state 100
    while     go to state 101
    dowhile   go to state 102
    for       go to state 103
    return    go to state 104
    block     go to state 212
    funcall   go to state 50
    expr      go to state 105
    assign    go to state 106
    varlet    go to state 108
    var       go to state 52
    constant  go to state 53
    floatval  go to state 54
    intval    go to state 55
    boolval   go to state 56


State 212

   47 for: FOR BRACKET_L INTTYPE ID LET expr COMMA expr COMMA expr BRACKET_R block •

    $default  reduce using rule 47 (for)
